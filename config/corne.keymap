/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo1 {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
        };

        combo2 {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };

        combo3 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        combo4 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        combo5 {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
        };

        combo6 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };

        combo7 {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
        };

        combo8 {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            global-quick-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp Q  &kp W  &kp E         &kp R           &kp T        &kp Y      &kp U         &kp I         &kp O    &kp P     &kp BACKSPACE
&kp LSHIFT  &kp A  &kp S  &kp D         &kp F           &kp G        &kp H      &kp J         &kp K         &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LCTRL   &kp Z  &kp X  &kp C         &kp V           &kp B        &kp N      &kp M         &kp COMMA     &kp DOT  &kp FSLH  &kp ESC
                          &kp LEFT_GUI  &lt 1 LEFT_ALT  &kp SPACE    &kp ENTER  &lt 2 C_MENU  &kp LEFT_ALT
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp N1    &kp N2        &kp N3            &kp N4           &kp N5    &kp N6     &kp N7     &kp N8            &kp N9             &kp N0  &kp DELETE
&trans  &kp LEFT  &kp UP        &kp DOWN          &kp RIGHT        &trans    &trans     &trans     &trans            &trans             &trans  &kp BACKSLASH
&trans  &trans    &kp C_VOL_DN  &kp K_PLAY_PAUSE  &kp C_VOLUME_UP  &trans    &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans  &kp GRAVE
                                &trans            &trans           &trans    &trans     &mo 3      &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&trans  &trans           &trans       &trans     &trans      &trans         &trans          &trans         &trans          &trans                &trans                 &trans
&trans  &trans           &trans       &trans     &trans      &trans         &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE  &kp RIGHT_BRACE       &trans                 &trans
                                      &trans     &mo 3       &trans         &trans          &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
